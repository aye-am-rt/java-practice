package com.MixedNotSure;
//
//Look-and-Say Sequence
//Find the n’th term in Look-and-say (Or Count and Say) Sequence. The look-and-say sequence is
// the sequence of below integers:
//1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …
//How is above sequence generated?
//n’th term in generated by reading (n-1)’th term.
//
//The first term is "1"
//
//Second term is "11", generated by reading first term as "One 1"
//(There is one 1 in previous term)
//
//Third term is "21", generated by reading second term as "Two 1"
//
//Fourth term is "1211", generated by reading third term as "One 2 One 1"
//
//and so on
//How to find n’th term?
//Example:

//Input: n = 3
//Output: 21
//
//Input: n = 5
//Output: 111221
/**
The idea is simple, we generate all terms from 1 to n. First two terms are initialized as “1”
and “11”, and all other terms are generated using previous terms. To generate a term using
previous term, we scan the previous term. While scanning a term, we simply keep track of
count of all consecutive characters. For sequence of same characters, we append the count
followed by character to generate the next term.*/

public class LookAndSayFB {
    public static void main(String[] args)
    {
        // Find the n’th term in Look-and-say (Or Count and Say) Sequence.
        //1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …

        int N = 5;
        System.out.println(countAndSay(N));
    }

    private static String countAndSay(int n) {
        // Base cases
        if (n == 1)     return "1";
        if (n == 2)     return "11";

        // Find n'th term by generating all terms from 3 to n-1. Every term is generated
        // using previous term *************** Initialize previous term
        StringBuilder str = new StringBuilder("11");
        for (int i = 3; i <= n; i++)
        {
            // In below for loop, previous character is processed in
            // current iteration. That is why a dummy character is
            // added to make sure that loop runs one extra iteration.
            str.append('$');
            int len = str.length();

            int cnt = 1; // Initialize count of matching chars
            StringBuilder tmp = new StringBuilder(); // Initialize i'th term in series
            char []arr = str.toString().toCharArray();
            // Process previous term to find the next term
            for (int j = 1; j < len; j++)
            {
                // If current character does't match
                if (arr[j] != arr[j - 1])
                {
                    // Append count of str[j-1] to temp
                    tmp.append(cnt);
                    // Append str[j-1]
                    tmp.append(arr[j - 1]);
                    // Reset count
                    cnt = 1;
                }
                // If matches, then increment count of matching characters
                else cnt++;
            }
            str = new StringBuilder(tmp.toString());
        }
        return str.toString();
    }
}
